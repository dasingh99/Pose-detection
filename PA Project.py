# -*- coding: utf-8 -*-
"""PA Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTt0YJFjC5D0Jpb7gKHg_o7qqQ7rIEB1

# 0. Install and Import Dependencies
"""

#!pip install mediapipe opencv-python

import cv2
import mediapipe as mp
import numpy as np
import pyttsx3
import speech_recognition as sr
import os
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose
import win32com.client as wincl
speak = wincl.Dispatch("SAPI.SpVoice")

engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice',voices[0].id)








def speak(audio):
    engine.say(audio)
    engine.runAndWait()

def down():
        speak("Down")

def up():
        speak("Up")

# VIDEO FEED
cap = cv2.VideoCapture(0)
while cap.isOpened():
    ret, frame = cap.read()
    cv2.imshow('Mediapipe Feed', frame)
    
    if cv2.waitKey(10) & 0xFF == ord('q'):
        break
        
cap.release()
cv2.destroyAllWindows()

"""# 1. Make Detections"""

cap = cv2.VideoCapture(0)
## Setup mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
      
        # Make detection
        results = pose.process(image)
    
        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2), 
                                mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2) 
                                 )               
        
        cv2.imshow('Mediapipe Feed', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

mp_drawing.DrawingSpec

"""# 2. Determining Joints

<img src="https://i.imgur.com/3j8BPdc.png" style="height:300px" >
"""

cap = cv2.VideoCapture(0)
## Setup mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
      
        # Make detection
        results = pose.process(image)
    
        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark
            print(landmarks)
        except:
            pass
        
        
        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2), 
                                mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2) 
                                 )               
        
        cv2.imshow('Mediapipe Feed', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

for lndmrk in mp_pose.PoseLandmark:
    print(lndmrk)

landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value]

landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value]

landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value]

"""# 3. Calculate Angles"""

def calculate_angle(a,b,c):
    a = np.array(a) # First
    b = np.array(b) # Mid
    c = np.array(c) # End
    
    radians = np.arctan2(c[1]-b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
    angle = np.abs(radians*180.0/np.pi)
    
    if angle >180.0:
        angle = 360-angle
        
    return angle

"""# 4. Curl Counter"""

cap = cv2.VideoCapture(0)

# Curl counter variables
counter_right = 0 
stage_right = None
counter_left = 0 
stage_left = None
message_right=None
message_left=None
color_left=None
color_right=None

## Setup mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
      
        # Make detection
        results = pose.process(image)
    
        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark
            
            # Get coordinates for left shoulder,elbow and wrist
            shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
            elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
            wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]
            
            # Get coordinates for right shoulder,elbow and wrist
            shoulderr = [landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y]
            elbowr = [landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].y]
            wristr = [landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].y]
            
            # Calculate angle for right shoulder,elbow and wrist
            angle = calculate_angle(shoulder, elbow, wrist)
            angler=calculate_angle(shoulderr,elbowr,wristr)
            # Visualize angle
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(elbow, [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                )
            cv2.putText(image, str(angler), 
                           tuple(np.multiply(elbowr, [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                )
            
            # Curl counter logic for right arm
            if angler > 173:
                stage_right = "down"
                message_right=""
                color_right=(0,0,255)
                 #speak.Speak("Down")
            if angler < 8 and stage_right =='down':
                stage_right="up"
                counter_right +=1
                message_right="Correct"
                color_right=(0,255,0)
            if angler > 8 and angler <173 :
                message_right="Incorrect"
                color_right=(0,0,255)
                
            # Curl counter logic for left arm
            if angle > 173:
                stage_left = "down"
                message_left=""
                color_left=(0,0,255)
                #speak.Speak("Down")
            if angle < 8 and stage_left =='down':
                stage_left="up"
                counter_left +=1
                message_left="Correct"
                color_left=(0,255,0)
                #speak.Speak("Up")
            if angle > 8 and angle <173 :
                message_left="Incorrect"
                color_left=(0,0,255)
                       
        except:
            pass
        
        # Render curl counter
        # Setup status box
        cv2.rectangle(image, (0,0), (150,50), (245,117,16), -1)
        cv2.rectangle(image, (500,0), (650,50), (245,117,16), -1)
        

        cv2.putText(image, str(counter_right), 
                    (5,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        
        cv2.putText(image, stage_right, 
                    (50,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        cv2.putText(image, message_right, 
                    (5,80), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, color_right, 2, cv2.LINE_AA)
    
        cv2.putText(image, str(counter_left), 
                    (505,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        
        cv2.putText(image, stage_left, 
                    (550,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        cv2.putText(image, message_left, 
                    (505,80), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, color_left, 2, cv2.LINE_AA)
    
        
        
        
        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2), 
                                mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2) 
                                 )               
        
        cv2.imshow('Bicep Curl Tracker', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

#SQUATS 
cap1 = cv2.VideoCapture(0)

# Curl counter variables
counter_right = 0 
stage_right = None
counter_left = 0 
stage_left = None
message_right=None
message_left=None
color_left=None
color_right=None

## Setup mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap1.isOpened():
        ret, frame = cap1.read()
        
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
      
        # Make detection
        results = pose.process(image)
    
        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark
            
            # Get coordinates
            left_hip = [landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x,landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y]
            left_knee = [landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].x,landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].y]
            left_ankle = [landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].x,landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].y]
            
            right_hip = [landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].y]
            right_knee = [landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].y]
            right_ankle = [landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].y]
            
            # Calculate angle for left and right knee,ankle and hip
            angle = calculate_angle(left_hip, left_knee, left_ankle)
            angler=calculate_angle(right_hip,right_knee,right_ankle)
            # Visualize angle
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(left_knee, [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                )
            cv2.putText(image, str(angler), 
                           tuple(np.multiply(right_knee, [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                )
            
            # Curl counter logic
            if angler > 160:
                stage_right = "up"
                message_right=""
                color_right=(0,0,255)
                #speak.Speak("up")
            if angler < 90 and stage_right =='up':
                stage_right="down"
                counter_right +=1
                message_right="Correct"
                color_right=(0,255,0)
                #speak.Speak("down")
            if angler > 90 and angler < 160:
                message_right="Incorrect"
                color_right=(0,0,255)
                
            if angle > 160:
                message_left=""
                stage_left = "up"
                color_left=(0,0,255)
                #speak.Speak("up")
            if angle < 90 and stage_left =='up':
                stage_left="down"
                counter_left +=1
                message_left="Correct"
                color_left=(0,255,0)
                #speak.Speak("down")
            if angler > 90 and angler < 160:
                message_left="Incorrect"
                color_left=(0,0,255)
                       
        except:
            pass
        
        # Render curl counter
        # Setup status box
        cv2.rectangle(image, (0,0), (150,50), (245,117,16), -1)
        cv2.rectangle(image, (500,0), (650,50), (245,117,16), -1)
        

        cv2.putText(image, str(counter_right), 
                    (5,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        
        cv2.putText(image, stage_right, 
                    (50,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        cv2.putText(image, message_right, 
                    (5,80), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, color_right, 2, cv2.LINE_AA)
            
            
    
        cv2.putText(image, str(counter_left), 
                    (505,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        
        cv2.putText(image, stage_left, 
                    (550,30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2, cv2.LINE_AA)
        cv2.putText(image, message_left, 
                    (505,80), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, color_left, 2, cv2.LINE_AA)
    
        
        
        
        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2), 
                                mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2) 
                                 )               
        
        cv2.imshow('Squats Tracker', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap1.release()
    cv2.destroyAllWindows()

